diff --git a/jdk.compiler/share/classes/com/sun/tools/javac/comp/Check.java b/jdk.compiler/share/classes/com/sun/tools/javac/comp/Check.java
index 560ccb9..dc30b7b 100644
--- a/jdk.compiler/share/classes/com/sun/tools/javac/comp/Check.java
+++ b/jdk.compiler/share/classes/com/sun/tools/javac/comp/Check.java
@@ -1322,7 +1322,7 @@ public class Check {
     private void warnOnExplicitStrictfp(JCTree tree) {
         deferredLintHandler.push(tree);
         try {
-            deferredLintHandler.report(_ -> lint.logIfEnabled(tree.pos(), LintWarnings.Strictfp));
+            deferredLintHandler.report(__ -> lint.logIfEnabled(tree.pos(), LintWarnings.Strictfp));
         } finally {
             deferredLintHandler.pop();
         }
@@ -4127,7 +4127,7 @@ public class Check {
             int opc = ((OperatorSymbol)operator).opcode;
             if (opc == ByteCodes.idiv || opc == ByteCodes.imod
                 || opc == ByteCodes.ldiv || opc == ByteCodes.lmod) {
-                deferredLintHandler.report(_ -> lint.logIfEnabled(pos, LintWarnings.DivZero));
+                deferredLintHandler.report(__ -> lint.logIfEnabled(pos, LintWarnings.DivZero));
             }
         }
     }
@@ -4140,7 +4140,7 @@ public class Check {
      */
     void checkLossOfPrecision(final DiagnosticPosition pos, Type found, Type req) {
         if (found.isNumeric() && req.isNumeric() && !types.isAssignable(found, req)) {
-            deferredLintHandler.report(_ ->
+            deferredLintHandler.report(__ ->
                 lint.logIfEnabled(pos, LintWarnings.PossibleLossOfPrecision(found, req)));
         }
     }
@@ -4340,7 +4340,7 @@ public class Check {
                             // Warning may be suppressed by
                             // annotations; check again for being
                             // enabled in the deferred context.
-                            deferredLintHandler.report(_ ->
+                            deferredLintHandler.report(__ ->
                                 lint.logIfEnabled(pos, LintWarnings.MissingExplicitCtor(c, pkg, modle)));
                         } else {
                             return;
@@ -4675,7 +4675,7 @@ public class Check {
 
     void checkModuleExists(final DiagnosticPosition pos, ModuleSymbol msym) {
         if (msym.kind != MDL) {
-            deferredLintHandler.report(_ ->
+            deferredLintHandler.report(__ ->
                 lint.logIfEnabled(pos, LintWarnings.ModuleNotFound(msym)));
         }
     }
@@ -4683,14 +4683,14 @@ public class Check {
     void checkPackageExistsForOpens(final DiagnosticPosition pos, PackageSymbol packge) {
         if (packge.members().isEmpty() &&
             ((packge.flags() & Flags.HAS_RESOURCE) == 0)) {
-            deferredLintHandler.report(_ ->
+            deferredLintHandler.report(__ ->
                 lint.logIfEnabled(pos, LintWarnings.PackageEmptyOrNotFound(packge)));
         }
     }
 
     void checkModuleRequires(final DiagnosticPosition pos, final RequiresDirective rd) {
         if ((rd.module.flags() & Flags.AUTOMATIC_MODULE) != 0) {
-            deferredLintHandler.report(_ -> {
+            deferredLintHandler.report(__ -> {
                 if (rd.isTransitive() && lint.isEnabled(LintCategory.REQUIRES_TRANSITIVE_AUTOMATIC)) {
                     log.warning(pos, LintWarnings.RequiresTransitiveAutomatic);
                 } else {
